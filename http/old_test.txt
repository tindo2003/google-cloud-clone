#include "request.h"
#include "request_parser.h"

using namespace httpparser;


int main() {
    // Server setup
    int server_fd, client_fd;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    const int PORT = 5010;

    // Create socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket failed");
        exit(EXIT_FAILURE);
    }

    // Attach socket to the port 5010
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt))) {
        perror("Setsockopt failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Define the server address
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;  // Listen on all interfaces
    address.sin_port = htons(PORT);

    // Bind the socket to the network address and port
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Start listening for client connections
    if (listen(server_fd, 3) < 0) {
        perror("Listen failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    std::cout << "Server is listening on port " << PORT << "..." << std::endl;

    // Accept a client connection
    if ((client_fd = accept(server_fd, (struct sockaddr *)&address,
                            (socklen_t *)&addrlen)) < 0) {
        perror("Accept failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Buffer to store data from client
    const int BUFFER_SIZE = 1024;
    char buffer[BUFFER_SIZE];
    std::string client_data;
    ssize_t bytes_read;

    // Read data from the client
    while ((bytes_read = read(client_fd, buffer, BUFFER_SIZE)) > 0) {
        client_data.append(buffer, bytes_read);

        // Check if the headers are fully received (look for \r\n\r\n)
        if (client_data.find("\r\n\r\n") != std::string::npos) {
            break;
        }
    }

    if (bytes_read < 0) {
        perror("Read failed");
        close(client_fd);
        close(server_fd);
        return EXIT_FAILURE;
    }

    std::cerr << "Raw request:\n" << client_data << std::endl;
    cerr << "-------" << endl;

    // Parse the HTTP request
    Request request;
    HttpRequestParser parser;
    HttpRequestParser::ParseResult res = parser.parse(
        request, client_data.c_str(),
        client_data.c_str() + client_data.size());

    if (res != HttpRequestParser::ParsingCompleted) {
        std::cerr << "Parsing failed" << std::endl;
        close(client_fd);
        close(server_fd);
        return EXIT_FAILURE;
    }
    std::cout << request.inspect() << std::endl;

    std::string method = request.method;
    for (char s: request.content) {
        cerr << s;
    }
    std::string response;

    // Handle OPTIONS preflight request
    if (method == "OPTIONS") {
        response =
            "HTTP/1.1 204 No Content\r\n"
            "Access-Control-Allow-Origin: *\r\n"
            "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
            "Access-Control-Allow-Headers: Content-Type, Authorization\r\n"
            "Access-Control-Max-Age: 86400\r\n"  // Cache preflight for 24 hours
            "\r\n";
        send(client_fd, response.c_str(), response.size(), 0);
        close(client_fd);
        close(server_fd);
        return EXIT_SUCCESS;
    }

    // Handle actual HTTP requests
    if (method == "GET" || method == "POST") {
        response =
            "HTTP/1.1 200 OK\r\n"
            "Access-Control-Allow-Origin: *\r\n"
            "Content-Type: text/plain\r\n"
            "Content-Length: 13\r\n"
            "\r\n"
            "Hello, World1!";
        send(client_fd, response.c_str(), response.size(), 0);
    } else {
        response =
            "HTTP/1.1 405 Method Not Allowed\r\n"
            "Access-Control-Allow-Origin: *\r\n"
            "Content-Type: text/plain\r\n"
            "Content-Length: 19\r\n"
            "\r\n"
            "Method Not Allowed";
        send(client_fd, response.c_str(), response.size(), 0);
    }

    // Close the client and server sockets
    close(client_fd);
    close(server_fd);

    return 0;
}